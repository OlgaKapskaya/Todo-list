{"version":3,"sources":["components/Input.module.css","components/Imput.tsx","components/EditSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Input","props","useState","title","setTitle","setError","isError","setIsError","addItem","trim","className","s","containerInput","TextField","value","onChange","e","currentTarget","onBlur","size","label","variant","onKeyPress","key","error","helperText","IconButton","onClick","style","marginLeft","Add","EditSpan","isEditMode","setIsEditMode","text","setText","offEditMode","changeText","onChangeText","event","autoFocus","onDoubleClick","Todolist","Typography","color","marginBottom","fontWeight","changeTodolistTitle","todolistID","deleteTodolist","DeleteOutlineOutlined","addTask","List","tasks","map","t","ListItem","id","isDone","padding","justifyContent","textDecoration","Checkbox","checked","changeTaskStatus","icon","CropSquare","checkedIcon","Done","changeTaskTitle","removeTask","ButtonGroup","Button","filter","changeFilter","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","taskID","filteredTasks","task","taskId","elem","AppBar","position","Toolbar","edge","aria-label","Menu","Container","Grid","container","paddingTop","paddingBottom","newTodolist","spacing","tasksForTodolist","item","Paper","width","Boolean","window","location","hostname","match","theme","createTheme","palette","primary","amber","secondary","grey","type","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9774d20c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerInput\":\"Input_containerInput__1Icpn\"};","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {Add, AddComment} from \"@material-ui/icons\";\nimport s from './Input.module.css'\n\n\ntype InputProps = {\n    addItem: (title: string) => void\n    label: string\n}\n\nexport const Input = (props: InputProps) => {\n\n    const [title, setTitle] = useState(\"\");\n    let [error, setError] = useState<string | null>(null)\n    const [isError, setIsError] = useState<boolean>(false)\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null);\n        setIsError(false)\n        if (e.key === \"Enter\") {\n            addItem();\n            setTitle(\"\")\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const addItem = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title.trim());\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n            setIsError(true)\n        }\n    }\n\n\n    return (\n        <div className={s.containerInput}>\n            <TextField value={title}\n                       onChange={onChangeHandler}\n                       onBlur={() => setIsError(false)}\n                       size={'small'}\n                       label={props.label}\n                       variant=\"outlined\"\n                       onKeyPress={onKeyPressHandler}\n                       error={isError}\n                       helperText={isError && 'Incorrect value!'}/>\n            <IconButton onClick={addItem} size={\"small\"} style={{marginLeft: '5px'}}>\n                <Add/>\n            </IconButton>\n        </div>\n    )\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype EditSpanType = {\n    title: string\n    onChangeText: (title: string) => void\n}\nexport const EditSpan = (props: EditSpanType) => {\n    const [isEditMode, setIsEditMode] = useState<boolean>(false)\n    const [text, setText] = useState(\"\")\n\n\n    const onEditMode = () => {\n        setText(props.title)\n        setIsEditMode(true)\n    }\n\n    const offEditMode = () => {\n        setIsEditMode(false)\n        changeText()\n    }\n\n    const changeText = () => {\n        if (text !== \"\") {\n            props.onChangeText(text)\n            setIsEditMode(false)\n        }\n    }\n\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") {\n            changeText()\n            offEditMode()\n        }\n    }\n    const onChangeTextHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setText(event.currentTarget.value)\n    }\n    return (\n        isEditMode ?\n            <TextField value={text}\n                       onBlur={offEditMode}\n                       onChange={onChangeTextHandler}\n                       onKeyPress={onKeyPressHandler}\n                       autoFocus/>\n            : <span onDoubleClick={onEditMode}> {props.title} </span>\n    )\n}\n\n\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {Input} from \"./components/Imput\";\r\nimport {EditSpan} from \"./components/EditSpan\";\r\nimport {\r\n    Button,\r\n    ButtonGroup,\r\n    Checkbox,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {\r\n    CropSquare,\r\n    DeleteOutlineOutlined, Done\r\n} from \"@material-ui/icons\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistID: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistID: string) => void\r\n    filter: FilterValuesType\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n    changeTaskTitle: (title: string, todolistID: string, taskID: string) => void\r\n    deleteTodolist: (todolistID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todolistID);\r\n    }\r\n\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.todolistID);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.todolistID);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.todolistID);\r\n    const editTitleTodolist = (title: string) => {\r\n        props.changeTodolistTitle(title, props.todolistID)\r\n    }\r\n    const deleteTodolistHandler = () => {\r\n        props.deleteTodolist(props.todolistID)\r\n    }\r\n    return <div >\r\n        <Typography variant={'h5'}\r\n                    color={'primary'}\r\n                    style={{marginBottom: '10px', fontWeight: 'bold'}}>\r\n            <EditSpan title={props.title} onChangeText={editTitleTodolist}/>\r\n            <IconButton onClick={deleteTodolistHandler} size={\"small\"}>\r\n                <DeleteOutlineOutlined/>\r\n            </IconButton>\r\n        </Typography>\r\n        <div>\r\n            <Input\r\n                addItem={addTask}\r\n                label={'Enter task title'}/>\r\n\r\n        </div>\r\n        <List>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.todolistID)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(t.id, e.currentTarget.checked, props.todolistID);\r\n                    }\r\n                    const onChangeTaskTitle = (title: string) => {\r\n                        props.changeTaskTitle(title, props.todolistID, t.id)\r\n                    }\r\n                    return <ListItem key={t.id}\r\n                                     className={t.isDone ? \"is-done\" : \"\"}\r\n                                     style={{\r\n                                         padding: \"0px\",\r\n                                         justifyContent: \"space-between\",\r\n                                         textDecoration: t.isDone ? \"line-through\" : 'none'\r\n                                     }}>\r\n                        <Checkbox checked={t.isDone}\r\n                                  onChange={onChangeHandler}\r\n                                  color={'primary'}\r\n                                  size={'small'}\r\n                                  icon={<CropSquare/>}\r\n                                  checkedIcon={<Done/>}\r\n                                  style={{padding: \"0px\"}}/>\r\n\r\n                        <EditSpan title={t.title} onChangeText={onChangeTaskTitle}/>\r\n                        <IconButton onClick={onClickHandler} size={'small'}>\r\n                            <DeleteOutlineOutlined/>\r\n                        </IconButton>\r\n                    </ListItem>\r\n                })\r\n            }\r\n        </List>\r\n        <div>\r\n            <ButtonGroup color={'primary'} size={'small'}>\r\n                <Button variant={props.filter === 'all' ? \"contained\" : \"outlined\"}\r\n                        onClick={onAllClickHandler}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? \"contained\" : \"outlined\"}\r\n                        onClick={onActiveClickHandler}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? \"contained\" : \"outlined\"}\r\n                        onClick={onCompletedClickHandler}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {Input} from \"./components/Imput\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Paper, Grid} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(taskID: string, todolistID: string) {\r\n        let filteredTasks = tasks[todolistID].filter(t => t.id !== taskID);\r\n        setTasks({...tasks, [todolistID]: filteredTasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistID: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        setTasks({...tasks, [todolistID]: [task, ...tasks[todolistID]]});\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, isDone: boolean, todolistID: string) {\r\n        setTasks({\r\n            ...tasks, [todolistID]: tasks[todolistID].map(elem => {\r\n                return elem.id === taskId ? {...elem, isDone: isDone} : elem\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistID: string) {\r\n        setTodolists(todolists.map(elem => elem.id === todolistID ? {...elem, filter: value} : elem))\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        let newTodolist: TodolistsType = {\r\n            id: v1(), title: title, filter: 'all'\r\n        }\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({...tasks, [newTodolist.id]: []})\r\n    }\r\n    const changeTodolistTitle = (title: string, todolistID: string) => {\r\n        setTodolists(todolists.map(elem => {\r\n            return (\r\n                elem.id === todolistID ? {...elem, title: title} : elem\r\n            )\r\n        }))\r\n    }\r\n    const changeTaskTitle = (title: string, todolistID: string, taskID: string) => {\r\n        setTasks({\r\n            ...tasks, [todolistID]: tasks[todolistID].map(elem => {\r\n                return (\r\n                    elem.id === taskID ? {...elem, title: title} : elem\r\n                )\r\n            })\r\n        })\r\n    }\r\n    const deleteTodolist = (todolistID: string) => {\r\n        setTodolists(todolists.filter(elem => elem.id !== todolistID))\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    {/*<Input*/}\r\n                    {/*    addItem={addTodolist}*/}\r\n                    {/*    label={\"Enter todolist title\"}/>*/}\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container style={{paddingTop: \"10px\", paddingBottom: '10px'}}> <Input\r\n                    addItem={addTodolist}\r\n                    label={\"Enter todolist title\"}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={2}>\r\n                    {todolists.map(elem => {\r\n                        let tasksForTodolist = tasks[elem.id];\r\n                        if (elem.filter === \"active\") {\r\n                            tasksForTodolist = tasks[elem.id].filter(t => !t.isDone);\r\n                        }\r\n                        if (elem.filter === \"completed\") {\r\n                            tasksForTodolist = tasks[elem.id].filter(t => t.isDone);\r\n                        }\r\n                        return (\r\n                            <Grid item key={elem.id}>\r\n                                <Paper style={{width: \"230px\", padding: \"10px\"}}\r\n                                       variant={'outlined'}>\r\n                                    <Todolist todolistID={elem.id}\r\n                                              title={elem.title}\r\n                                              tasks={tasksForTodolist}\r\n                                              removeTask={removeTask}\r\n                                              changeFilter={changeFilter}\r\n                                              addTask={addTask}\r\n                                              changeTaskStatus={changeTaskStatus}\r\n                                              filter={elem.filter}\r\n                                              changeTodolistTitle={changeTodolistTitle}\r\n                                              changeTaskTitle={changeTaskTitle}\r\n                                              deleteTodolist={deleteTodolist}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createTheme, CssBaseline, ThemeProvider} from \"@material-ui/core\";\r\nimport {amber, grey} from \"@material-ui/core/colors\";\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: amber,\r\n        secondary: grey,\r\n        type: 'dark'\r\n    }\r\n})\r\nReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n    <App />\r\n    </ThemeProvider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}