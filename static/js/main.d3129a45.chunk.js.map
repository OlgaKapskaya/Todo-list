{"version":3,"sources":["Todolist.module.css","Task.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Task","props","key","task","taskId","className","isDone","type","onChange","event","changeStatus","currentTarget","checked","onClick","removeTask","title","Todolist","useState","setTitle","error","setError","studentName","setStudentName","addTask","trim","todolistID","addStudent","alert","s","mainContainer","removeTodolist","collapseTodolist","isOpen","listContainer","label","value","e","onKeyPress","charCode","tasks","map","t","changeTaskStatus","taskID","filter","changeFilter","studentList","students","elem","deleteStudent","App","v1","todolist","todo","setTodo","useEffect","name","st","filteredTasks","newTodolist","addTodolistHandler","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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,aACA,kBACA,aACA,iBACA,aACA,aACA,gBACA,gBACA,gBACA,iBACA,gBACA,eACA,gBACA,iBACA,sBACA,iBACA,YACA,eACA,cACA,iBACA,kBACA,cACA,cACA,mBACA,oBACA,gBACA,mBACA,sBACA,gBACA,qBACA,mBACA,qBAGR,CAEIhC,MAAO,aACP6B,OAAQ,MACRZ,QAAQ,EACRO,MAAO,CACH,CAACnC,OAAQ+C,cAAMpC,MAAO,YAAaT,QAAQ,GAC3C,CAACF,OAAQ+C,cAAMpC,MAAO,MAAOT,QAAQ,IAEzCyC,SAAU,CACN,gBACA,cACA,gBACA,cACA,gBACA,kBACA,mBACA,qBACA,eACA,kBACA,iBACA,gBACA,eACA,iBACA,oBACA,mBACA,cACA,kBACA,gBACA,eACA,gBACA,aACA,cACA,kBACA,aACA,eACA,YACA,gBACA,gBACA,eACA,gBACA,gBACA,cACA,cACA,mBACA,gBACA,mBACA,gBACA,cACA,aACA,gBACA,mBACA,iBACA,eACA,mBAGR,CAEIhC,MAAO,cACP6B,OAAQ,MACRZ,QAAQ,EACRO,MAAO,CACH,CAACnC,OAAQ+C,cAAMpC,MAAO,YAAaT,QAAQ,GAC3C,CAACF,OAAQ+C,cAAMpC,MAAO,MAAOT,QAAQ,IAEzCyC,SAAU,CACN,gBACA,cACA,gBACA,cACA,gBACA,kBACA,mBACA,qBACA,eACA,kBACA,iBACA,gBACA,eACA,iBACA,oBACA,mBACA,cACA,kBACA,gBACA,eACA,gBACA,aACA,cACA,kBACA,aACA,eACA,YACA,gBACA,gBACA,eACA,gBACA,gBACA,cACA,cACA,mBACA,gBACA,mBACA,gBACA,cACA,aACA,gBACA,mBACA,iBACA,eACA,mBAGR,CAEIhC,MAAO,iBACP6B,OAAQ,MACRZ,QAAQ,EACRO,MAAO,CACH,CAACnC,OAAQ+C,cAAMpC,MAAO,YAAaT,QAAQ,GAC3C,CAACF,OAAQ+C,cAAMpC,MAAO,MAAOT,QAAQ,IAEzCyC,SAAU,CACN,gBACA,cACA,gBACA,cACA,gBACA,kBACA,mBACA,qBACA,eACA,kBACA,iBACA,gBA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","file":"static/js/main.d3129a45.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Todolist_mainContainer__OpZ4O\",\"listContainer\":\"Todolist_listContainer__Jde7k\",\"studentList\":\"Todolist_studentList__3ArxN\",\"label\":\"Todolist_label__3fYr1\"};","import React from \"react\";\nimport {TaskType} from \"./Todolist\";\n\n\ntype TaskPropsType = {\n    task: TaskType\n    changeStatus: (taskId: string, isDone: boolean) => void\n    removeTask: (taskId: string) => void\n}\nexport const Task = (props: TaskPropsType) => {\n\n    return (\n        <li key={props.task.taskId} className={props.task.isDone ? \"is-done\" : \"\"}>\n            <input type=\"checkbox\"\n                   onChange={(event) => props.changeStatus(props.task.taskId, event.currentTarget.checked)}\n                   checked={props.task.isDone}/>\n            <button onClick={() => props.removeTask(props.task.taskId)}>x</button>\n            <span> {props.task.title}</span>\n\n        </li>\n    )\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from './Todolist.module.css'\r\nimport {FilterValuesType} from './App';\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    taskId: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    key: string\r\n    todolistID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    students: Array<string>\r\n    removeTask: (taskId: string, todolistID: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistID: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistID: string) => void\r\n    deleteStudent: (todolistID: string, name: string) => void\r\n    addStudent: (todolistID: string, name: string) => void\r\n    collapseTodolist: (todolistID: string) => void\r\n    isOpen: boolean\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n    const [studentName, setStudentName] = useState('')\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(title.trim(), props.todolistID);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const addStudent = () => {\r\n        if (studentName.trim() !== \"\") {\r\n            props.addStudent(props.todolistID, studentName);\r\n            setStudentName(\"\");\r\n        } else {\r\n            alert(\"Name is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onChangeStudentHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStudentName(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    const onKeyPressStudentHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addStudent();\r\n        }\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.todolistID);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.todolistID);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.todolistID);\r\n    const removeTodolistHandler = () => props.removeTodolist(props.todolistID)\r\n\r\n\r\n    const onClickOpenHandler = () => {\r\n        props.collapseTodolist(props.todolistID)\r\n    }\r\n\r\n    return <div className={s.mainContainer}>\r\n        <h3>\r\n            <button onClick={removeTodolistHandler}>DEL</button>\r\n            {` ${props.title}`}\r\n        </h3>\r\n        <button onClick={onClickOpenHandler}> open</button>\r\n\r\n        {props.isOpen &&\r\n            <>\r\n                <div className={s.listContainer}>\r\n\r\n\r\n                    <div>\r\n                        <div className={s.label}>Enter task title:</div>\r\n                        <input value={title}\r\n                               onChange={onChangeHandler}\r\n                               onKeyPress={onKeyPressHandler}\r\n                               className={error ? \"error\" : \"\"}\r\n                        />\r\n                        <button onClick={addTask}>+</button>\r\n                        {error && <div className=\"error-message\">{error}</div>}\r\n                    </div>\r\n                    <ul>\r\n                        {\r\n                            props.tasks.map(t => {\r\n                                const removeTask = (taskID: string) => {\r\n                                    props.removeTask(taskID, props.todolistID)\r\n                                }\r\n                                const changeTaskStatus = (taskId: string, isDone: boolean) => {\r\n                                    props.changeTaskStatus(taskId, isDone, props.todolistID)\r\n                                }\r\n                                return (\r\n                                        <Task\r\n                                            task={t}\r\n                                            changeStatus={changeTaskStatus}\r\n                                            removeTask={removeTask}/>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                    <div>\r\n                        <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                                onClick={onAllClickHandler}>All\r\n                        </button>\r\n                        <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                                onClick={onActiveClickHandler}>Active\r\n                        </button>\r\n                        <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                                onClick={onCompletedClickHandler}>Completed\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <div className={s.studentList}>\r\n                    <h4> STUDENTS LIST </h4>\r\n                    <div className={s.label}>Enter student name:</div>\r\n                    <input value={studentName}\r\n                           onChange={onChangeStudentHandler}\r\n                           onKeyPress={onKeyPressStudentHandler}\r\n                    />\r\n                    <button onClick={addStudent}>+</button>\r\n                    <ol>\r\n                        {props.students.map( (elem) => {\r\n                            const onClickDeleteStudent = () => {\r\n                                props.deleteStudent(props.todolistID, elem)\r\n                            }\r\n                            return (\r\n                                <li>\r\n                                    <button onClick={onClickDeleteStudent}>DEL</button>\r\n                                    <span> {elem}</span>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ol>\r\n                </div>\r\n            </>\r\n        }\r\n    </div>\r\n\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype ObjectType = {\r\n    title: string\r\n    isOpen: boolean\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    students: Array<string>\r\n}\r\ntype TodolistType = ObjectType & {\r\n    todolistID: string\r\n}\r\n\r\nfunction App() {\r\n\r\n    const [todolist, setTodolist] = useState<Array<ObjectType>>([\r\n        {\r\n            title: \"What to learn\",\r\n            filter: \"all\",\r\n            isOpen: true,\r\n            tasks: [\r\n                {taskId: v1(), title: \"HTML&CSS\", isDone: true},\r\n                {taskId: v1(), title: \"JS\", isDone: true},\r\n                {taskId: v1(), title: \"ReactJS\", isDone: false},\r\n                {taskId: v1(), title: \"Rest API\", isDone: false},\r\n                {taskId: v1(), title: \"GraphQL\", isDone: false},\r\n            ],\r\n            students: [\r\n                'Rick Kane',\r\n                'Finnlay Bentley',\r\n                'Samia North',\r\n                'Isaac Morton',\r\n                'Lily-Ann Clifford',\r\n                'Thalia Park',\r\n                'Sapphire Cruz',\r\n                'Cieran Vazquez',\r\n                'Anya Estes',\r\n                'Dominika Field',\r\n                'Rosanna Chung',\r\n                'Safiyah Davey',\r\n                'Ryley Beasley',\r\n                'Kalvin Trejo',\r\n                'Evie-Mae Farrell',\r\n                'Juliet Valencia',\r\n                'Astrid Austin',\r\n                'Lyle Montgomery',\r\n                'Nisha Mora',\r\n                'Kylie Callaghan',\r\n                'Star Wilks',\r\n                'Marissa Colley',\r\n                'Asa Fuller',\r\n                'Leigh Kemp',\r\n                'Avleen Dawson',\r\n                'Sammy Bonilla',\r\n                'Acacia Becker',\r\n                'Coral Shepherd',\r\n                'Melina Molina',\r\n                'Kiran Bailey',\r\n                'Clara Escobar',\r\n                'Alexandru Horn',\r\n                'Brandon-Lee Mercado',\r\n                'Elouise Weston',\r\n                'King Long',\r\n                'Kerri Searle',\r\n                'Kanye Hamer',\r\n                'Elwood Benitez',\r\n                'Mikail Whitaker',\r\n                'Bobby Hardy',\r\n                'Talha Ferry',\r\n                'Priscilla Landry',\r\n                'Olivia-Grace Cain',\r\n                'Kiaan Wallace',\r\n                'Wesley Padilla90',\r\n                'Ella-Grace Wooten91',\r\n                'Kaif Molloy92',\r\n                'Kamal Broadhurst93',\r\n                'Bianca Ferrell94',\r\n                'Micheal Talbot95',\r\n            ]\r\n        },\r\n        {\r\n\r\n            title: \"What to do\",\r\n            filter: \"all\",\r\n            isOpen: false,\r\n            tasks: [\r\n                {taskId: v1(), title: \"HTML&CSS2\", isDone: true},\r\n                {taskId: v1(), title: \"JS2\", isDone: true}\r\n            ],\r\n            students: [\r\n                'Jago Wormald1',\r\n                'Saul Milne2',\r\n                'Aariz Hester3',\r\n                'Dion Reeve4',\r\n                'Anisa Ortega5',\r\n                'Blade Cisneros6',\r\n                'Malaikah Phelps7',\r\n                'Zeeshan Gallagher8',\r\n                'Isobella Vo9',\r\n                'Rizwan Mathis10',\r\n                'Menaal Leach11',\r\n                'Kian Walton12',\r\n                'Orion Lamb13',\r\n                'Faizah Huynh14',\r\n                'Crystal Vaughan15',\r\n                'Vivien Hickman16',\r\n                'Stuart Lu17',\r\n                'Karol Davison18',\r\n                'Dario Burns19',\r\n                'Chloe Rich20',\r\n                'Martyna Felix',\r\n                'Nida Glass',\r\n                'Maeve Miles',\r\n                'Hasnain Puckett',\r\n                'Ayman Cano',\r\n                'Safwan Perry',\r\n                'Fox Kelly',\r\n                'Louise Barlow',\r\n                'Malaki Mcgill',\r\n                'Leanna Cline',\r\n                'Willard Hodge',\r\n                'Amelia Dorsey',\r\n                'Kiah Porter',\r\n                'Jeanne Daly',\r\n                'Mohsin Armstrong',\r\n                'Laurie Rangel',\r\n                'Princess Tierney',\r\n                'Kasim Kendall',\r\n                'Darryl Cope',\r\n                'Elysha Ray',\r\n                'Liyana Harris',\r\n                'Kashif Blackburn',\r\n                'Atif Zimmerman',\r\n                'Sila Hartley',\r\n                'Ralphie Hebert',\r\n            ]\r\n        },\r\n        {\r\n\r\n            title: \"What to buy\",\r\n            filter: \"all\",\r\n            isOpen: false,\r\n            tasks: [\r\n                {taskId: v1(), title: \"HTML&CSS2\", isDone: true},\r\n                {taskId: v1(), title: \"JS2\", isDone: true}\r\n            ],\r\n            students: [\r\n                'Jago Wormald1',\r\n                'Saul Milne2',\r\n                'Aariz Hester3',\r\n                'Dion Reeve4',\r\n                'Anisa Ortega5',\r\n                'Blade Cisneros6',\r\n                'Malaikah Phelps7',\r\n                'Zeeshan Gallagher8',\r\n                'Isobella Vo9',\r\n                'Rizwan Mathis10',\r\n                'Menaal Leach11',\r\n                'Kian Walton12',\r\n                'Orion Lamb13',\r\n                'Faizah Huynh14',\r\n                'Crystal Vaughan15',\r\n                'Vivien Hickman16',\r\n                'Stuart Lu17',\r\n                'Karol Davison18',\r\n                'Dario Burns19',\r\n                'Chloe Rich20',\r\n                'Martyna Felix',\r\n                'Nida Glass',\r\n                'Maeve Miles',\r\n                'Hasnain Puckett',\r\n                'Ayman Cano',\r\n                'Safwan Perry',\r\n                'Fox Kelly',\r\n                'Louise Barlow',\r\n                'Malaki Mcgill',\r\n                'Leanna Cline',\r\n                'Willard Hodge',\r\n                'Amelia Dorsey',\r\n                'Kiah Porter',\r\n                'Jeanne Daly',\r\n                'Mohsin Armstrong',\r\n                'Laurie Rangel',\r\n                'Princess Tierney',\r\n                'Kasim Kendall',\r\n                'Darryl Cope',\r\n                'Elysha Ray',\r\n                'Liyana Harris',\r\n                'Kashif Blackburn',\r\n                'Atif Zimmerman',\r\n                'Sila Hartley',\r\n                'Ralphie Hebert',\r\n            ]\r\n        },\r\n        {\r\n\r\n            title: \"What to change\",\r\n            filter: \"all\",\r\n            isOpen: false,\r\n            tasks: [\r\n                {taskId: v1(), title: \"HTML&CSS2\", isDone: true},\r\n                {taskId: v1(), title: \"JS2\", isDone: true}\r\n            ],\r\n            students: [\r\n                'Jago Wormald1',\r\n                'Saul Milne2',\r\n                'Aariz Hester3',\r\n                'Dion Reeve4',\r\n                'Anisa Ortega5',\r\n                'Blade Cisneros6',\r\n                'Malaikah Phelps7',\r\n                'Zeeshan Gallagher8',\r\n                'Isobella Vo9',\r\n                'Rizwan Mathis10',\r\n                'Menaal Leach11',\r\n                'Kian Walton12',\r\n                'Orion Lamb13',\r\n                'Faizah Huynh14',\r\n                'Crystal Vaughan15',\r\n                'Vivien Hickman16',\r\n                'Stuart Lu17',\r\n                'Karol Davison18',\r\n                'Dario Burns19',\r\n                'Chloe Rich20',\r\n                'Martyna Felix',\r\n                'Nida Glass',\r\n                'Maeve Miles',\r\n                'Hasnain Puckett',\r\n                'Ayman Cano',\r\n                'Safwan Perry',\r\n                'Fox Kelly',\r\n                'Louise Barlow',\r\n                'Malaki Mcgill',\r\n                'Leanna Cline',\r\n                'Willard Hodge',\r\n                'Amelia Dorsey',\r\n                'Kiah Porter',\r\n                'Jeanne Daly',\r\n                'Mohsin Armstrong',\r\n                'Laurie Rangel',\r\n                'Princess Tierney',\r\n                'Kasim Kendall',\r\n                'Darryl Cope',\r\n                'Elysha Ray',\r\n                'Liyana Harris',\r\n                'Kashif Blackburn',\r\n                'Atif Zimmerman',\r\n                'Sila Hartley',\r\n                'Ralphie Hebert',\r\n            ]\r\n        }\r\n    ])\r\n    const [todo, setTodo] = useState<Array<TodolistType>>([])\r\n\r\n    useEffect(() => {\r\n        setTodo(todolist.map(elem => {\r\n            return (\r\n                {todolistID: v1(), ...elem}\r\n            )\r\n        }))\r\n    }, [todolist])\r\n\r\n    const collapseTodolist = (todolistID: string) => {\r\n        setTodo(todo.map(elem => {\r\n            return (\r\n                elem.todolistID === todolistID ? {...elem, isOpen: true} :\r\n                    elem.isOpen ? {...elem, isOpen: false} : elem\r\n            )\r\n        }))\r\n    }\r\n    const deleteStudent = (todolistID: string, name: string) => {\r\n        setTodo(todo.map(elem => {\r\n            return (\r\n                elem.todolistID === todolistID ? {...elem, students: elem.students.filter(st => st !== name)} : elem\r\n            )\r\n        }))\r\n    }\r\n\r\n    function removeTask(taskID: string, todolistID: string) {\r\n        let filteredTasks = todo.map(elem => {\r\n            return (\r\n                elem.todolistID === todolistID ? {...elem, tasks: elem.tasks.filter((t => t.taskId !== taskID))} : elem\r\n            )\r\n        })\r\n        setTodo(filteredTasks);\r\n    }\r\n\r\n    function addTask(title: string, todolistID: string) {\r\n        let task = {taskId: v1(), title: title, isDone: false};\r\n        setTodo(todo.map(elem => {\r\n            return (\r\n                elem.todolistID === todolistID ? {...elem, tasks: [task, ...elem.tasks]} : elem\r\n            )\r\n        }))\r\n    }\r\n\r\n    const addStudent = (todolistID: string, name: string) => {\r\n        setTodo(todo.map(elem => {\r\n            return (\r\n                elem.todolistID === todolistID ? {...elem, students: [name, ...elem.students]} : elem\r\n            )\r\n        }))\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, isDone: boolean, todolistID: string) {\r\n        setTodo(todo.map(elem => {\r\n            return (\r\n                elem.todolistID === todolistID ? {\r\n                    ...elem, tasks: elem.tasks.map(t => {\r\n                        return (\r\n                            t.taskId === taskId ? {...t, isDone: isDone} : t\r\n                        )\r\n                    })\r\n                } : elem\r\n            )\r\n        }))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistID: string) {\r\n        setTodo(todo.map(elem => {\r\n            return (\r\n                elem.todolistID === todolistID ? {...elem, filter: value} : elem\r\n            )\r\n        }))\r\n    }\r\n\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodo(todo.filter(elem => elem.todolistID !== todolistID))\r\n\r\n    }\r\n    const [title, setTitle] = useState(\"\")\r\n    const onChangeTitleTodolistHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const addTodolistHandler = (title: string) => {\r\n        if (title.trim() !== \"\"){\r\n            const newTodolist: TodolistType = {\r\n                todolistID: v1(),\r\n                title: title,\r\n                filter: \"all\",\r\n                isOpen: false,\r\n                tasks: [],\r\n                students: []\r\n            }\r\n            setTodo([newTodolist, ...todo])\r\n        } else {\r\n            alert('Error!!! Enter todolist title!')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <div className={'containerAddTodolist'}>\r\n                    <div className={'label'}> Enter todolist title:</div>\r\n                    <input value={title} onChange={onChangeTitleTodolistHandler}/>\r\n                    <button onClick={() => addTodolistHandler(title)}> ADD</button>\r\n                </div>\r\n            </header>\r\n            <div className=\"App\">\r\n\r\n                {todo.map(elem => {\r\n                    let tasksForTodolist = elem.tasks;\r\n\r\n                    if (elem.filter === \"active\") {\r\n                        tasksForTodolist = elem.tasks.filter(t => !t.isDone);\r\n                    }\r\n                    if (elem.filter === \"completed\") {\r\n                        tasksForTodolist = elem.tasks.filter(t => t.isDone);\r\n                    }\r\n                    return (\r\n                        <Todolist\r\n                            key={elem.todolistID}\r\n                            todolistID={elem.todolistID}\r\n                            title={elem.title}\r\n                            tasks={tasksForTodolist}\r\n                            students={elem.students}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            filter={elem.filter}\r\n                            removeTodolist={removeTodolist}\r\n                            deleteStudent={deleteStudent}\r\n                            addStudent={addStudent}\r\n                            collapseTodolist={collapseTodolist}\r\n                            isOpen={elem.isOpen}\r\n                        />\r\n\r\n                    )\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}